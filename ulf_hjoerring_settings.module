<?php

/**
 * @file
 * Code for the Ulf Hjørring feature.
 */

include_once 'ulf_hjoerring_settings.features.inc';


/**
 * Add new role.
 *
 * @return array
 *   An array defining a role
 */
function ulf_hjoerring_settings_secure_permissions_roles() {
  return array(
    'company consultant',
    'company',
  );
}

/**
 * Implements hook_secure_permissions().
 */
function ulf_hjoerring_settings_secure_permissions($role) {
  $permissions = [];
  if($role == 'company consultant') {
    // by default company consultants have the same permissions as editors, with a few alterations
    $permissions = secure_permissions_data_secure_permissions('editor');

    $permissions[] = 'assign company consultant role';
    $permissions[] = 'assign company role';
    $permissions[] = 'create news_course_provider content';
    $permissions[] = 'create internship content';
    $permissions[] = 'edit any internship content';
    $permissions[] = 'edit own internship content';
    $permissions[] = 'create education content';
    $permissions[] = 'edit any education content';
    $permissions[] = 'edit own education content';

    $remove = [
      'assign editor role',
      'assign course provider role',
      'create course content',
      'edit any course content',
      'edit own course content',
      'create course_educators content',
      'edit any course_educators content',
      'edit own course_educators content',
    ];

    foreach ($remove as $permission) {
      if (($key = array_search($permission, $permissions)) !== false) {
        unset($permissions[$key]);
      }
    }

  }
  if($role == 'company') {
    // companies should never actually log in, so their permissions doesn't matter
    $permissions = [];
  }

  //todo: should be deleted
  $permissions[] = 'access kint devel information';
  $permissions[] = 'administer kint settings';

  return $permissions;
}

/**
 * Implements hook_user_presave().
 */
function ulf_hjoerring_settings_user_presave(&$edit, $account, $category)
{
  if($edit['status'] == 1) {
    $role = user_role_load_by_name('company');
    if(isset($edit['roles'][$role->rid]) && $edit['roles'][$role->rid] != 0) {
      $edit['status'] = 0;
    }
  }
}

/**
 * Implements hook_form_alter().
 */
function ulf_hjoerring_settings_form_alter(&$form, &$form_state, $form_id)
{
  if($form_id == 'internship_node_form' || $form_id == 'education_node_form') {
    $node = $form_state['node'];
    $form['company'] = $form['author'];
    unset($form['company']['date']);
    unset($form['author']['name']);
    $form['author']['#attributes']['class'] = [];
    $form['author']['#title'] = 'Oprettelsesdato';
    if(!isset($node->nid) || isset($node->is_new)) {
      $form['company']['name']['#default_value'] = '';
    }
    $form['company']['name']['#description'] = '';
    $form['company']['name']['#required'] = true;
    $form['company']['name']['#title'] = 'Udbyder';
    $form['company']['#attributes']['class'] = [];
    $form['company']['#weight'] = -49;
    $form['company']['#group'] = null;
    $form['company']['#collapsed'] = false;
    $form['company']['#title'] = 'Udbyder';


    if($form_id == 'education_node_form') {
      $form['field_subjects_primary_school']['und']['#ajax'] = [
        'callback' => 'dynamically_change_competencies_options',
        'wrapper' => 'competencies-wrapper',
        'method' => 'replace',
        'effect' => 'fade',
      ];
      $form['field_competencies']['und']['#prefix'] = '<div id="competencies-wrapper">';
      $form['field_competencies']['und']['#suffix'] = '</div>';

      if(isset($form_state['values'])) {
        //ajax request
        $subjects = array_column($form_state['values']['field_subjects_primary_school']['und'], 'tid');
        if($subjects[0] === null) {
          $subjects = [];
        }
      } else if(!isset($node->nid) || isset($node->is_new)) {
        //creating new node
        $subjects = [];
      } else {
        //editing existing node
        $subjects = [];
        if(isset($node->field_subjects_primary_school['und'])) {
          $subjects = array_column($node->field_subjects_primary_school['und'], 'tid');
        }
      }

      $taxonomy_tree = taxonomy_get_tree(taxonomy_vocabulary_machine_name_load('competencies')->vid, 0, null, true);
      $competencies_options = [];
      foreach ($taxonomy_tree as $term) {
        if(in_array($term->field_parent_subject['und'][0]['tid'], $subjects)) {
          $competencies_options[$term->tid] = $term->name;
        }
      }

      $form['field_competencies']['und']['#options'] = $competencies_options;
      if(!$competencies_options) {
        $form['field_competencies']['und']['#description'] = 'Vælg først fag';
      }

    }
  }
}

function dynamically_change_competencies_options($form, $form_state) {
  return $form['field_competencies'];
}

function ulf_hjoerring_settings_views_default_views_alter(&$views) {
  if(isset($views['ulf_workbench_edits_by_user'])) {
    $view = $views['ulf_workbench_edits_by_user'];
    foreach ($view->display as $id => $display) {
      if($filter = $view->get_item($id, 'filter', 'type')) {
        $filter['value']['internship'] = 'internship';
        $filter['value']['education'] = 'education';
        $view->set_item($id, 'filter', 'type', $filter);
      }
    }
  }
  if(isset($views['ulf_frontpage_promoted_courses'])) {
    $view = $views['ulf_frontpage_promoted_courses'];
    foreach ($view->display as $id => $display) {
      if($filter = $view->get_item($id, 'filter', 'type')) {
        $filter['value']['internship'] = 'internship';
        $filter['value']['education'] = 'education';
        $view->set_item($id, 'filter', 'type', $filter);
      }
    }
  }
}
